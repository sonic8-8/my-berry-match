server:
  port: 8085

---

spring:
  profiles:
    default: local

  datasource:
    url: ${AZURE_MYSQL_SERVER_URL}
    username: ${AZURE_MYSQL_SERVER_USERNAME}
    password: ${AZURE_MYSQL_SERVER_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

#  datasource:
#    url: ${MY_DB_URL}
#    username: ${MY_DB_USERNAME}
#    password: ${MY_DB_PASSWORD}
#    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: create

  data:
    mongodb:
      uri: mongodb+srv://${MONGO_USERNAME}:${MONGO_PASSWORD}@${MONGO_CLUSTER}/${MONGO_DATABASE}?retryWrites=true&w=majority

  cloud:
    aws:
      credentials:
        accessKey: ${AMAZON_S3_BUCKET_ACCESSKEY}
        secretKey: ${AMAZON_S3_BUCKET_SECRETKEY}
      s3:
        bucket: ${AMAZON_S3_BUCKET_NAME}
      region:
        static: ${AMAZON_S3_BUCKET_REGION}

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_OAUTH2_CLIENT_ID}
            client-secret: ${GOOGLE_OAUTH2_CLIENT_SECRET}
            client-name: Google
            redirect-uri: http://localhost:8085/login/oauth2/code/google
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            scope:
              - email

          naver:
            client-id: ${NAVER_OAUTH2_CLIENT_ID}
            client-secret: ${NAVER_OAUTH2_CLIENT_SECRET}
            client-name: Naver
            redirect-uri: http://localhost:8085/login/oauth2/code/naver
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            scope:
              - email

          kakao:
            client-id: ${KAKAO_OAUTH2_CLIENT_ID}
            client-secret: ${KAKAO_OAUTH2_CLIENT_SECRET}
            client-name: Kakao
            redirect-uri: http://localhost:8085/login/oauth2/code/kakao
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            scope:
              - account_email

        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

  mvc:
    cors:
      mappings:
        /api/*:
          allowed-origins: "http://localhost:3000"
          allowed-methods: "GET,POST,PUT,DELETE,OPTIONS"
          allowed-headers: "*"
          allow-credentials: true
        /socket/*:
          allowed-origins: "http://localhost:9000"
          allowed-methods: "GET,POST,PUT,DELETE,OPTIONS"
          allowed-headers: "*"
          allow-credentials: true

  servlet:
    multipart:
      max-file-size: 500MB   # 업로드할 수 있는 단일 파일의 최대 크기
      max-request-size: 2048MB # 전체 요청의 최대 크기
      file-size-threshold: 100MB # 이 크기 이상의 파일은 임시 디렉토리에 저장됨
      location: /tmp/uploads # 업로드한 파일이 저장될 임시 디렉토리


url:
  base: http://localhost:3000
  path:
    signup: /signup
    auth: /token

---
spring:
  config:
    activate:
      on-profile: local

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    defer-datasource-initialization: true # (2.5~) Hibernate 초기화 이후 data.sql 실행



---
spring:
  config:
    activate:
      on-profile: test

  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  sql:
    init:
      mode: never

  datasource:
    url: jdbc:h2:mem:~/berrymatch
    driver-class-name: org.h2.Driver
    username: sa
    password:

#    cloud:
#      aws:
#        stack:
#          auto: false
#        region:
#          static: ap-northeast-2

  main:
    allow-bean-definition-overriding: true